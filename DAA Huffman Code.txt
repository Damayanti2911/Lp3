string = "ABCDABBCDABCA"

class NodeTree(object):
    
    def __init__(self, left=None, right=None):
        self.left= left
        self.right= right
        
    def children(self):
        return( self.left, self.right)
     
    def nodes(self):
        return (self.left,self.right)
    
    def __str__(self):
        return "%s_%s"%(self.left,self.right)
    

def Huffman_coding_tree(node,left=True,binstring=""):
    if type(node) is str:
        return {node: binstring}
    
    (l,r)=node.children()
    d=dict()
    d.update(Huffman_coding_tree(l, True, binstring + '0'))
    d.update(Huffman_coding_tree(r, False, binstring + '1'))
    return d
    
freq={}
for i in string:
    if i in freq:
        freq[i] += 1
    else:
        freq[i] = 1

freq = sorted(freq.items(),key=lambda x: x[1], reverse= True)
#print(freq)
nodes= freq

while(len(nodes)>1):
    (key1,c1) = nodes[-1]
    (key2,c2) = nodes[-2]
    nodes = nodes[:-2]
    node= NodeTree(key1,key2)
    nodes.append((node,c1+c2))
    
    nodes=sorted(nodes, key= lambda x: x[1], reverse= True)

huffman_code= Huffman_coding_tree(nodes[0][0])

print("Char  |  Huffman Code")
print("--------------------")
for (char,frequency) in freq:
    print(' %-4r |%12s' % (char, huffman_code[char]))
